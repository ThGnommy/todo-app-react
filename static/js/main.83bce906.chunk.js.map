{"version":3,"sources":["components/Header/Header.js","components/NewTask/NewTask.js","components/CreateTask/CreateTask.js","components/Task/Task.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","Header","props","title","NewTask","Button","button","onClick","symbol","CreateTask","Create","display","Input","input","attrs","type","Container","div","id","Task","Note","li","color","Cross","p","delete","text","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","App","listRef","React","createRef","useState","showInput","setShowInput","setDisplay","setSymbol","task","setTask","useEffect","handleCreateTask","collection","get","then","doc","docs","forEach","element","console","log","DeleteTask","data","key","note","TaskList","ul","e","target","parentElement","remove","className","document","getElementById","colorsArray","Math","floor","random","length","value","add","catch","error","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.83bce906.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Title = styled.h1`\r\n    display: block;\r\n    font-weight: 700;\r\n    width: 90vw;\r\n    margin: 1rem auto;\r\n    padding: 1rem;\r\n    background-color: black;\r\n    color: aliceblue;\r\n    border-radius: 15px;\r\n    -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n`\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <Title>\r\n            {props.title}\r\n        </Title>\r\n    )\r\n}\r\n\r\nexport default Header; \r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nexport const NewTask = (props) => {\r\n\r\n    const Button = styled.button`\r\n    font-family: 'Amatic SC', cursive;\r\n    font-size: 1.5rem;\r\n    background-color: darkgreen;\r\n    font-weight: 400;\r\n    color: aliceblue;\r\n    border-radius: 15px;\r\n    border: none;\r\n    padding: 1rem 2rem;\r\n    margin: 2rem 0;\r\n    -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    transition: padding 300ms ease-out;\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    `\r\n\r\n    return (\r\n        <Button onClick={props.onClick}>{props.symbol} New Task</Button>\r\n    )\r\n}\r\n\r\nNewTask.propTypes = {\r\n    onClick: PropTypes.func,\r\n    symbol: PropTypes.string\r\n}\r\n\r\nexport default NewTask","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst CreateTask = props => {\r\n\r\n    const Create = styled.button`\r\n        display: ${ props.display };\r\n        font-family: 'Amatic SC', cursive;\r\n        font-weight: 400;\r\n        font-size: 2rem;\r\n        border: 0;\r\n        padding: 1rem;\r\n        background-color: black;\r\n        color: aliceblue;\r\n        border-radius: 15px;\r\n        -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        transition: font-size 200ms; \r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n\r\n        &:active {\r\n            font-size: 1.8rem;\r\n        }\r\n    `\r\n\r\n    const Input = styled.input.attrs({ type: \"text\" })`\r\n    display: ${ props.display };\r\n    font-family: 'Amatic SC', cursive;\r\n    font-weight: 400;\r\n    font-size: 2rem;\r\n    width: 50vw;\r\n    margin-right: 1rem;\r\n    border: 0;\r\n    padding: 1rem;\r\n    background-color: black;\r\n    color: aliceblue;\r\n    border-radius: 15px;\r\n    -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n    box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n\r\n    &:focus {\r\n    outline: none;\r\n\r\n    }\r\n    `\r\n\r\n    const Container = styled.div`\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n    `\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Input id='input-task' display={props.display} />\r\n            <Create onClick={props.onClick}>Create</Create>\r\n        </Container>\r\n    )\r\n}\r\n\r\nCreateTask.propTypes = {\r\n    display: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default CreateTask","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Task = props => {\r\n\r\n    const Note = styled.li`\r\n        display: block;\r\n        font-family: 'Amatic SC', cursive;\r\n        font-weight: 400;\r\n        font-size: 2rem;\r\n        width: 50vw;\r\n        border: 0;\r\n        padding: 1rem;\r\n        background-color: ${props.color};\r\n        color: aliceblue;\r\n        border-radius: 15px;\r\n        -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n\r\n        &:focus {\r\n        outline: none;\r\n    }\r\n    `\r\n\r\n    const Cross = styled.p`\r\n        display: block;\r\n        font-family: 'Amatic SC', cursive;\r\n        font-weight: 400;\r\n        font-size: 2rem;\r\n        border: 0;\r\n        padding: 1rem 2rem;\r\n        color: red!important;\r\n        background-color: aliceblue;\r\n        margin-right: 1rem;\r\n        color: aliceblue;\r\n        border-radius: 15px;\r\n        -webkit-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        -moz-box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        box-shadow: 0px 0px 15px 5px rgba(0,0,0,0.75);\r\n        transition: all 300ms;\r\n\r\n        &:hover {\r\n            font-weight: 700;\r\n        }\r\n    `\r\n\r\n    const Container = styled.div`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    `\r\n\r\n    return (\r\n        <Container id={props.id}>\r\n            <Cross onClick={props.delete}>X</Cross>\r\n            <Note>{props.text}</Note>\r\n        </Container>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    text: PropTypes.string,\r\n    id: PropTypes.string,\r\n    delete: PropTypes.func,\r\n    color: PropTypes.string,\r\n}\r\n\r\nexport default Task\r\n","import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB5hnJs5htcYik3cq74cybqnUl7KrJNGyw\",\r\n    authDomain: \"todo-app-c8f29.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-c8f29.firebaseio.com\",\r\n    projectId: \"todo-app-c8f29\",\r\n    storageBucket: \"todo-app-c8f29.appspot.com\",\r\n    messagingSenderId: \"475104595529\",\r\n    appId: \"1:475104595529:web:0060636105f2f2d256b998\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebaseApp.firestore()\r\n  \r\n  export { db }","import React, { useState, useEffect } from 'react';\r\nimport Header from './components/Header/Header'\r\nimport './App.css';\r\nimport NewTask from './components/NewTask/NewTask';\r\nimport CreateTask from './components/CreateTask/CreateTask';\r\nimport styled from 'styled-components';\r\nimport Task from './components/Task/Task';\r\nimport { db } from './firebase'\r\n\r\nconst App = () => {\r\n\r\n  const listRef = React.createRef()\r\n\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [display, setDisplay] = useState('none');\r\n  const [symbol, setSymbol] = useState('+')\r\n  const [task, setTask] = useState([]);\r\n\r\n  useEffect(() => {\r\n    handleCreateTask();\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n    const RenderTasks = () => {\r\n      db.collection('notes').get().then((doc) => {\r\n  \r\n        doc.docs.forEach(element => {\r\n          console.log(element.id)\r\n          setTask(task => [...task, \r\n          <Task \r\n            delete={DeleteTask} \r\n            id={element.id} \r\n            color={element.data().color}\r\n            key={element.id} \r\n            text={element.data().note} \r\n          />])\r\n        })\r\n      })\r\n    }\r\n\r\n    RenderTasks();\r\n  }, [])\r\n\r\n  const handleCreateTask = () => {\r\n    if(!showInput) {\r\n      setDisplay('none')\r\n      setSymbol('+')\r\n    }\r\n    else {\r\n      setDisplay('block')\r\n      setSymbol('-')\r\n    }\r\n  }\r\n\r\n  const TaskList = styled.ul`\r\n    padding: 0;\r\n  `\r\n\r\n  const DeleteTask = (e) => {\r\n    const note = e.target.parentElement\r\n\r\n    db.collection(\"notes\").doc(note.id).delete().then(function() {\r\n      note.remove()\r\n    })\r\n  }\r\n\r\n  const SetTextToTask = (color) => {\r\n\r\n    const id = document.getElementById('input-task')\r\n\r\n    const colorsArray = [\r\n      'chocolate',\r\n      'cornflowerblue', \r\n      'darkmagenta', \r\n      'darkred', \r\n      'dodgerblue'\r\n    ]\r\n\r\n    color = colorsArray[Math.floor(Math.random() * colorsArray.length)]\r\n\r\n    if(id.value === '') { return; }\r\n\r\n    db.collection(\"notes\").add({\r\n      note: id.value,\r\n      color: color\r\n    }).then((doc) => {\r\n      setTask(task => [...task, <Task color={color} id={doc.id} key={doc.id} text={id.value} />])\r\n      console.log(\"Document written with ID: \", doc.id);\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n  \r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"TO DO APP\" />\r\n      <NewTask \r\n        onClick={() => setShowInput(!showInput)} \r\n        symbol={symbol}\r\n      />\r\n      <CreateTask display={display} onClick={SetTextToTask} />\r\n      <TaskList ref={listRef}>\r\n        {task}\r\n      </TaskList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}